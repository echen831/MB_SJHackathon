{"version":3,"sources":["components/states.js","components/today.jsx","components/history.jsx","components/map.jsx","App.js","index.js"],"names":["STATES_HASH","STATES_ABBREV","hash","newHash","key","invert","Today","currState","useState","error","setError","isLoaded","setIsLoaded","items","setItems","Date","date","useEffect","fetch","then","res","json","result","message","getMonth","getDate","getFullYear","map","state","display","className","totalTestResults","positive","negative","History","data","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","content","type","stackId","stroke","fill","CustomTooltip","props","active","payload","COLORS","Map","fetchHistData","setCurrState","svgRef","useRef","wrapperRef","svg","select","current","projection","geoAlbersUsa","fitSize","pathGenerator","geoPath","selectAll","features","join","on","feature","d","properties","NAME","attr","fips","STATE","Number","Math","floor","random","length","ref","style","Months","App","isHistLoaded","setHistIsLoaded","histError","setHistError","histData","setHistdata","newResult","newRes","Object","assign","setDate","y","toString","slice","m","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.841037b1.chunk.js","sourcesContent":["export const STATES = [\n    {\n        \"name\": \"Alabama\",\n        \"abbreviation\": \"AL\"\n    },\n    {\n        \"name\": \"Alaska\",\n        \"abbreviation\": \"AK\"\n    },\n    {\n        \"name\": \"Arizona\",\n        \"abbreviation\": \"AZ\"\n    },\n    {\n        \"name\": \"Arkansas\",\n        \"abbreviation\": \"AR\"\n    },\n    {\n        \"name\": \"California\",\n        \"abbreviation\": \"CA\"\n    },\n    {\n        \"name\": \"Colorado\",\n        \"abbreviation\": \"CO\"\n    },\n    {\n        \"name\": \"Connecticut\",\n        \"abbreviation\": \"CT\"\n    },\n    {\n        \"name\": \"Delaware\",\n        \"abbreviation\": \"DE\"\n    },\n    {\n        \"name\": \"District Of Columbia\",\n        \"abbreviation\": \"DC\"\n    },\n    {\n        \"name\": \"Florida\",\n        \"abbreviation\": \"FL\"\n    },\n    {\n        \"name\": \"Georgia\",\n        \"abbreviation\": \"GA\"\n    },\n    {\n        \"name\": \"Hawaii\",\n        \"abbreviation\": \"HI\"\n    },\n    {\n        \"name\": \"Idaho\",\n        \"abbreviation\": \"ID\"\n    },\n    {\n        \"name\": \"Illinois\",\n        \"abbreviation\": \"IL\"\n    },\n    {\n        \"name\": \"Indiana\",\n        \"abbreviation\": \"IN\"\n    },\n    {\n        \"name\": \"Iowa\",\n        \"abbreviation\": \"IA\"\n    },\n    {\n        \"name\": \"Kansas\",\n        \"abbreviation\": \"KS\"\n    },\n    {\n        \"name\": \"Kentucky\",\n        \"abbreviation\": \"KY\"\n    },\n    {\n        \"name\": \"Louisiana\",\n        \"abbreviation\": \"LA\"\n    },\n    {\n        \"name\": \"Maine\",\n        \"abbreviation\": \"ME\"\n    },\n    {\n        \"name\": \"Maryland\",\n        \"abbreviation\": \"MD\"\n    },\n    {\n        \"name\": \"Massachusetts\",\n        \"abbreviation\": \"MA\"\n    },\n    {\n        \"name\": \"Michigan\",\n        \"abbreviation\": \"MI\"\n    },\n    {\n        \"name\": \"Minnesota\",\n        \"abbreviation\": \"MN\"\n    },\n    {\n        \"name\": \"Mississippi\",\n        \"abbreviation\": \"MS\"\n    },\n    {\n        \"name\": \"Missouri\",\n        \"abbreviation\": \"MO\"\n    },\n    {\n        \"name\": \"Montana\",\n        \"abbreviation\": \"MT\"\n    },\n    {\n        \"name\": \"Nebraska\",\n        \"abbreviation\": \"NE\"\n    },\n    {\n        \"name\": \"Nevada\",\n        \"abbreviation\": \"NV\"\n    },\n    {\n        \"name\": \"New Hampshire\",\n        \"abbreviation\": \"NH\"\n    },\n    {\n        \"name\": \"New Jersey\",\n        \"abbreviation\": \"NJ\"\n    },\n    {\n        \"name\": \"New Mexico\",\n        \"abbreviation\": \"NM\"\n    },\n    {\n        \"name\": \"New York\",\n        \"abbreviation\": \"NY\"\n    },\n    {\n        \"name\": \"North Carolina\",\n        \"abbreviation\": \"NC\"\n    },\n    {\n        \"name\": \"North Dakota\",\n        \"abbreviation\": \"ND\"\n    },\n\n    {\n        \"name\": \"Ohio\",\n        \"abbreviation\": \"OH\"\n    },\n    {\n        \"name\": \"Oklahoma\",\n        \"abbreviation\": \"OK\"\n    },\n    {\n        \"name\": \"Oregon\",\n        \"abbreviation\": \"OR\"\n    },\n    {\n        \"name\": \"Pennsylvania\",\n        \"abbreviation\": \"PA\"\n    },\n    {\n        \"name\": \"Rhode Island\",\n        \"abbreviation\": \"RI\"\n    },\n    {\n        \"name\": \"South Carolina\",\n        \"abbreviation\": \"SC\"\n    },\n    {\n        \"name\": \"South Dakota\",\n        \"abbreviation\": \"SD\"\n    },\n    {\n        \"name\": \"Tennessee\",\n        \"abbreviation\": \"TN\"\n    },\n    {\n        \"name\": \"Texas\",\n        \"abbreviation\": \"TX\"\n    },\n    {\n        \"name\": \"Utah\",\n        \"abbreviation\": \"UT\"\n    },\n    {\n        \"name\": \"Vermont\",\n        \"abbreviation\": \"VT\"\n    },\n    {\n        \"name\": \"Virginia\",\n        \"abbreviation\": \"VA\"\n    },\n    {\n        \"name\": \"Washington\",\n        \"abbreviation\": \"WA\"\n    },\n    {\n        \"name\": \"West Virginia\",\n        \"abbreviation\": \"WV\"\n    },\n    {\n        \"name\": \"Wisconsin\",\n        \"abbreviation\": \"WI\"\n    },\n    {\n        \"name\": \"Wyoming\",\n        \"abbreviation\": \"WY\"\n    }\n]\n\nexport const STATES_HASH = {\n    \"AL\": \"Alabama\",\n    \"AK\": \"Alaska\",\n    \"AZ\": \"Arizona\",\n    \"AR\": \"Arkansas\",\n    \"CA\": \"California\",\n    \"CO\": \"Colorado\",\n    \"CT\": \"Connecticut\",\n    \"DE\": \"Delaware\",\n    \"DC\": \"District Of Columbia\",\n    \"FL\": \"Florida\",\n    \"GA\": \"Georgia\",\n    \"HI\": \"Hawaii\",\n    \"ID\": \"Idaho\",\n    \"IL\": \"Illinois\",\n    \"IN\": \"Indiana\",\n    \"IA\": \"Iowa\",\n    \"KS\": \"Kansas\",\n    \"KY\": \"Kentucky\",\n    \"LA\": \"Louisiana\",\n    \"ME\": \"Maine\",\n    \"MD\": \"Maryland\",\n    \"MA\": \"Massachusetts\",\n    \"MI\": \"Michigan\",\n    \"MN\": \"Minnesota\",\n    \"MS\": \"Mississippi\",\n    \"MO\": \"Missouri\",\n    \"MT\": \"Montana\",\n    \"NE\": \"Nebraska\",\n    \"NV\": \"Nevada\",\n    \"NH\": \"New Hampshire\",\n    \"NJ\": \"New Jersey\",\n    \"NM\": \"New Mexico\",\n    \"NY\": \"New York\",\n    \"NC\": \"North Carolina\",\n    \"ND\": \"North Dakota\",\n    \"OH\": \"Ohio\",\n    \"OK\": \"Oklahoma\",\n    \"OR\": \"Oregon\",\n    \"PW\": \"Palau\",\n    \"PA\": \"Pennsylvania\",\n    \"RI\": \"Rhode Island\",\n    \"SC\": \"South Carolina\",\n    \"SD\": \"South Dakota\",\n    \"TN\": \"Tennessee\",\n    \"TX\": \"Texas\",\n    \"UT\": \"Utah\",\n    \"VT\": \"Vermont\",\n    \"VI\": \"Virgin Islands\",\n    \"VA\": \"Virginia\",\n    \"WA\": \"Washington\",\n    \"WV\": \"West Virginia\",\n    \"WI\": \"Wisconsin\",\n    \"WY\": \"Wyoming\"\n}\n\nconst invert = (hash) => {\n    let newHash = {};\n\n    for(let key in hash) {\n        newHash[hash[key]] = key;\n    }\n\n    return newHash;\n}\n\nexport const STATES_ABBREV = invert(STATES_HASH);\n","import React, { useEffect, useState } from 'react';\nimport { STATES_HASH } from './states.js';\n\nexport const Today = ({currState}) => {\n\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n    const [date, setDate] = useState(new Date());\n\n    useEffect(() => {\n        fetch(`https://api.covidtracking.com/v1/states/current.json`)\n            .then(res => res.json())\n            .then((result) => {\n                setIsLoaded(true);\n                setItems(result);\n            },\n            (error) => {\n                setIsLoaded(true);\n                setError(error)\n            }\n        )\n    }, [])\n\n    if (error) {\n        return (\n            <div>Error: {error.message}</div>\n        )\n    } else if (!isLoaded) {\n        return <div>Loading...</div>\n    } else {\n        return (\n            <div>\n                <h1>Today's Data: {`${date.getMonth()+1}/${date.getDate()}/${date.getFullYear()}`}</h1>\n                <h2>State: {STATES_HASH[currState]}</h2>\n                {items.map(state => {\n                    const display = currState !== state.state ? 'hide' : 'state-wrapper'\n                    return (\n                        <div className={display} key={state.state}>\n                            <li>Total Tests</li>\n                            <li>{state.totalTestResults}</li>\n                            <li>Positive</li>\n                            <li>{state.positive}</li>\n                            <li>Negative</li>\n                            <li>{state.negative}</li>\n                        </div>\n\n                    )\n                })}\n            </div>\n        )\n    }\n    // return (\n    //     <div className='map-container'>\n    //         {/* Map goes here...\n    //         <ul>\n    //             {names.map((name, idx) => {\n    //                 return(\n    //                     <div key={idx}>\n    //                         <li>{name.name}</li>\n    //                         <li>{name.address}</li>\n    //                     </div>\n    //                 )\n    //             })}\n    //         </ul> */}\n    //     </div>\n    // )\n}","import React from 'react';\nimport {\n    AreaChart, Area, BarChart, Bar, Cell, XAxis, YAxis, CartesianGrid, Tooltip, Legend,\n} from 'recharts';\n\n\nexport const History = ({ data, isLoaded, error }) => {\n\n    if (error) {\n        return <div>Error: {error.message}</div>\n    } else if (!isLoaded) {\n        return <div>Loading...</div>\n    } else {\n        return (\n            <div>\n                <h2>Historic Data</h2>    \n                <AreaChart\n                    width={450}\n                    height={225}\n                    data={data}\n                    margin={{\n                        top: 20, right: 30, left: 20, bottom: 5,\n                    }}\n                >\n                    <CartesianGrid strokeDasharray=\"4 4\" />\n                    <XAxis dataKey=\"date\" />\n                    <YAxis />\n                    <Tooltip content={<CustomTooltip date={data.date}/>}/>\n                    <Legend />\n                    <Area type=\"monotone\" dataKey=\"positive\" stackId=\"1\" stroke=\"#8884d8\" fill=\"#8884d8\" />\n                    <Area type=\"monotone\" dataKey=\"negative\" stackId=\"1\" stroke=\"#82ca9d\" fill=\"#82ca9d\" />\n                </AreaChart>\n            </div>\n        )\n\n    }\n} \n\nconst CustomTooltip = (props) => {\n    if (props.active) {\n        return (\n            <div className=\"custom-tooltip\">\n                <li className=\"date\">{props.payload[0].payload.date}</li>\n                <li>Total: {props.payload[0].payload.totalTestResults}</li>\n                <li className=\"positive\">Pos: {props.payload[0].payload.positive}</li>\n                <li className=\"negative\">Neg: {props.payload[0].payload.negative}</li>\n            </div>\n        );\n    }\n\n    return null;\n};\n","import React, { useRef, useEffect, useState } from 'react';\nimport { select, geoPath, geoAlbersUsa } from \"d3\";\nimport { STATES_ABBREV } from \"./states\";\nimport { Today } from './today';\n\nconst COLORS = [\"blue\", \"green\", \"gold\", \"orange\", \"red\", \"purple\", \"maroon\", \"purple\", 'grey', \"indigo\"];\n\n\n\nexport const Map = ({ data, fetchHistData, setCurrState }) => {\n    const [state, setState] = useState('CA')\n    const svgRef = useRef();\n    const wrapperRef = useRef();\n\n    useEffect(() => {\n        const svg = select(svgRef.current);\n        \n        const width = 750;\n        const height = 375;\n\n        const projection = geoAlbersUsa().fitSize([width, height], data);\n        const pathGenerator = geoPath().projection(projection);\n\n        // const div = select(\"body\").append(\"div\")\n        //     .attr(\"class\", \"tooltip\")\n        //     .style(\"opacity\", 0);\n\n        svg\n            .selectAll(\".state\")\n            .data(data.features)\n            .join(\"path\")\n            .on(\"click\", (feature, d) => {\n                fetchHistData(STATES_ABBREV[d.properties.NAME])\n            })\n            .on(\"mouseover\", (feature, d) => {\n                setCurrState(STATES_ABBREV[d.properties.NAME])\n                // div.transition()\n                //     .duration(200)\n                //     .style('opacity', .9);\n                // div.html(d.properties.NAME)\n            })\n            .attr(\"fill\", (d) => {\n                var fips = d.properties.STATE\n                return COLORS[Number(fips[Math.floor(Math.random() * fips.length)]) % COLORS.length];\n            })\n            .attr(\"class\", \"state\")\n            .attr(\"d\", feature => pathGenerator(feature))\n    }, [data])\n\n\n    return (\n        <div ref={wrapperRef} >\n            <svg ref={svgRef} style={{ width: 750, height: 375 }} className='map'></svg>\n        </div>\n    )\n}\n\n\n// enter code to define tooltip\n\n// var tooltip = d3.select('body').append(\"div\")\n//     .attr(\"id\", \"tooltip-div\")\n//     .attr(\"class\", \"tooltip\")\n//     .style(\"opacity\", 0);\n\n/* D3 tooltip for map */\n// div.tooltip {\n//     position: absolute;\n//     text - align: center;\n//     color: white;\n//     width: 220px;\n//     height: 120px;\n//     padding: 2px;\n//     font: 12px sans - serif;\n//     background - color: gray;\n//     border: 2px;\n//     border: solid;\n//     border - radius: 8px;\n//     pointer - events: none;\n// }\n","import React, { useState, useEffect } from 'react';\n\nimport './App.css';\nimport { Today } from './components/today';\nimport { History } from './components/history'\nimport { Buttons } from './components/buttons';\nimport { Map } from './components/map';\nimport data from './assets/us_map.json';\n\nconst Months = {\n  '01': 'Jan',\n  '02': 'Feb',\n  '03': 'Mar',\n  '04': 'Apr',\n  '05': 'May',\n  '06': 'Jun',\n  '07': 'Jul',\n  '08': 'Aug',\n  '09': 'Sep',\n  '10': 'Oct',\n  '11': 'Nov',\n  '12': 'Dec'\n}\n\nconst App = () => {\n\n  const [currState, setCurrState] = useState('CA');\n  const [isHistLoaded, setHistIsLoaded] = useState(false);\n  const [histError, setHistError] = useState(null);\n  const [histData, setHistdata] = useState([]);\n\n\n  useEffect(() => { fetchHistData(currState) }, [])\n\n  const fetchHistData = (state) => {\n    setHistIsLoaded(false);\n    fetch(`https://api.covidtracking.com/v1/states/${state}/daily.json`)\n      .then(res => res.json())\n      .then((result) => {\n        let newResult = result.map(res => {\n            let newRes = Object.assign({}, res);\n            newRes.date = setDate(newRes.date);\n            return newRes;\n        })\n        setHistIsLoaded(true);\n        setHistdata(newResult);\n      },\n        (error) => {\n          setHistIsLoaded(true);\n          setHistError(error)\n        }\n      )\n  }\n\n  const setDate = (date) => {\n    date = date.toString();\n    let y = date.slice(0, 4);\n    let m = date.slice(4, 6);\n    let d = date.slice(6);\n\n    return `${Months[m]} ${d}, ${y}`\n  }\n\n  \n  return (\n    <div className=\"App\">\n      MB Social Justice Hackathon\n      <div className='map-wrapper'>\n        <div className='info-wrapper'>\n          <Today currState={currState}/>\n          <History data={histData} isLoaded={isHistLoaded} error={histError}/>\n        </div>\n        <Map data={data} fetchHistData={fetchHistData} setCurrState={setCurrState}/>\n      </div>\n      {/* <Buttons setCurrState={setCurrState} fetchHistData={fetchHistData}/> */}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}